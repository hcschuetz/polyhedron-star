{
  // This is the same star as for the regular icosahedron from
  // https://mathstodon.xyz/@GerardWestendorp/113374197385229562:
  starGaps: {
    a: "10h 8h 8h 60°",
    b: "8h 6h     60°",
    c: "6h        60°",
    d: "6h 4h     60°",
    e: "4h        60°",
    f: "4h 2h     60°",
    g: "2h        60°",
    h: "2h 12h    60°",
    i: "12h       60°",
    j: "12h 10h   60°",
    k: "10h       60°",
  },
  // But with different edges we get a different shape, resembling an origami
  // lampshade.
  // - The constraint solver converges quite slowly.  Is the shape actually
  //   completely determined by topology + edge lengths?  Or can we pull the
  //   two "poles" apart resulting in a longer and slimmer shape?
  // - The bending angles look like precise values, but actually the
  //   constraint solver modifies them slightly.
  // - An interesting observation: If you replace the five 120° angles to 140°,
  //   the solver will find a solution with rotational symmetry order 4 rather
  //   than 5.  Some edges near the pole-to-pole cut (= gap "a") get 180° bends
  //   ensuring that the gap closes properly.
  edges: [
    "c", "e", "g", "i", "k",
    "b", "d", "f", "h", "j",
    "a b     120°",
    "a d     120°",
    "a f     120°",
    "a h     120°",
    "a j     120°",
    "a c     -60°",
    "a e     -60°",
    "a g     -60°",
    "a i     -60°",
    "a k     -60°",
    "b c     108°",
    "c d     108°",
    "d e     108°",
    "e f     108°",
    "f g     108°",
    "g h     108°",
    "h i     108°",
    "i j     108°",
    "j k     108°",
    "k a b   108°",
  ],
  display: {
    vertices: false,
    labels: true,
    edges: true,
    cuts: true,
    faces: true,
    breaks: false,
    flower: false,
    grid: "triangular even",
    bending: 1,
    autobend: true,
    grid: "triangular even",
    density: 1,
    grid3: {
      subTriangles: true,
      triangles: false,
      diamonds: false,
      hexagons1: false,
      hexagons2: false,
      ball: false,
      zigzag: false,
    }
  }
}
